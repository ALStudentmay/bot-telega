import telebot
import sqlite3
import cv2
import mysql.connector
import numpy as np
from pyzbar.pyzbar import decode
from telebot.types import BotCommand
from telebot import types
import random
import string
db_config = {
    "host": "localhost",
    "user": "root",
    "password": "ibragimkuanbek",
    "database": "water_dispenser"}

API_TOKEN = "7853851460:AAG6bqmN_wn21s1MjeqycUJPgdwFY8gtPU0"
bot = telebot.TeleBot(API_TOKEN)
name = ''
ADMIN_CHAT_ID = 7291413166
def get_db_connection():
    return mysql.connector.connect(**db_config)
def generate_access_key():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
users_data = {}
def is_registered(user_id):
    conn = sqlite3.connect('employee.sqlite3')
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    conn.close()
    return result is not None


def get_db_connection():
    return mysql.connector.connect(**db_config)


def update_qr_status(qr_code_text):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π QR-–∫–æ–¥ –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–Ω
        cursor.execute("SELECT * FROM qr_codes WHERE qr_code = %s AND status = 'active'", (qr_code_text,))
        qr_entry = cursor.fetchone()

        if qr_entry:
            user_id = qr_entry["user_id"]
            bonus_count = qr_entry["bonus_count"]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å QR-–∫–æ–¥–∞ –Ω–∞ "used"
            cursor.execute("UPDATE qr_codes SET status = 'used' WHERE qr_code = %s", (qr_code_text,))

            # –í—ã—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã bonuses
            cursor.execute("UPDATE bonuses SET bonus_count = bonus_count - %s WHERE user_id = %s",
                           (bonus_count, user_id))

            conn.commit()
            return True, bonus_count  # QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        else:
            return False, 0  # QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False, 0
    finally:
        cursor.close()
        conn.close()


@bot.message_handler(commands=['scan_qr'])
def request_qr_code(message):
    bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º.")


@bot.message_handler(content_types=['photo'])
def scan_qr_code(message):
    try:
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        downloaded_file = bot.download_file(file_path)
        np_arr = np.frombuffer(downloaded_file, np.uint8)
        image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        qr_codes = decode(image)

        if not qr_codes:
            bot.send_message(message.chat.id, "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        for qr in qr_codes:
            qr_text = qr.data.decode("utf-8")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å QR-–∫–æ–¥–∞
            success, deducted_bonus = update_qr_status(qr_text)

            if success:
                bot.send_message(message.chat.id, f"‚úÖ QR-–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –í—ã—á—Ç–µ–Ω–æ {deducted_bonus} –±–æ–Ω—É—Å–æ–≤.")
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è QR-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞: {e}")




@bot.message_handler(commands=['enter'])
def ask_password(message):
    chat_id = message.chat.id
    conn = sqlite3.connect('employee.sqlite3')
    cur = conn.cursor()
    cur.execute("SELECT pass FROM users WHERE user_id = ?", (chat_id,))
    user_data = cur.fetchone()
    cur.close()
    conn.close()
    if user_data:
        bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
        bot.register_next_step_handler(message, check_password, user_data[0])
    else:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
def check_password(message, correct_password):
    chat_id = message.chat.id
    entered_password = message.text.strip()
    if entered_password == correct_password:
        conn = sqlite3.connect('employee.sqlite3')
        cur = conn.cursor()
        cur.execute("UPDATE users SET registration = 1 WHERE user_id = ?", (chat_id,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(chat_id, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É! üéâ")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è /enter.")
@bot.message_handler(commands=['admin'])
def admin_login(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    conn = sqlite3.connect('employee.sqlite3')
    cur = conn.cursor()
    cur.execute('SELECT user_id, name, pass, phone, code_enter, registration, language FROM users')
    users = cur.fetchall()
    cur.close()
    conn.close()
    if not users:
        bot.send_message(message.chat.id, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    info = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \n\n"
    for user_id, name, password, phone, access_key, registration, language in users:
        status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if registration == 1 else "‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        info += (f"üë§ –ò–º—è: {name}\n"
                 f"üÜî ID: {user_id}\n"
                 f"üîë –ü–∞—Ä–æ–ª—å: {password}\n"
                 f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                 f"üîê –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {access_key}\n"
                 f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                 f"üåç –Ø–∑—ã–∫: {language if language else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                 "----------------------\n")
        try:
            bot.send_message(user_id, f"üîë –í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {access_key}", parse_mode="Markdown")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {name}: {e}")
    bot.send_message(message.chat.id, info, parse_mode="Markdown")
@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('employee.sqlite3')  # –ë—ã–ª–æ 'employee.sql'
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            pass TEXT,
            code_enter TEXT,
            phone TEXT,
            registration INTEGER,
            language TEXT,
            user_id INTEGER UNIQUE
        )
    ''')
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! üëã –Ø - —á–∞—Ç –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üòÅ\n'
                                      '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, –Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>/help</b> ü§ì\n'
                                      '–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫, —Ç–æ –Ω–∞–ø–∏—à–∏ <b>/language</b>', parse_mode='html')
    bot.send_message(message.chat.id,
                     '–Ø –∑–∞–Ω—ë—Å —Ç–µ–±—è –≤ –±–∞–∑—É, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π <b>/register</b>üòú\n',
                     parse_mode='html')
@bot.message_handler(commands=['register'])
def ask_name(message):
    chat_id = message.chat.id
    conn = sqlite3.connect('employee.sqlite3')
    cur = conn.cursor()
    cur.execute("SELECT registration FROM users WHERE user_id = ?", (chat_id,))
    register = cur.fetchone()
    cur.close()
    conn.close()
    if register and register[0] == 1:
        bot.send_message(chat_id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
    else:
        users_data[chat_id] = {}
        bot.send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, ask_password1)
def ask_password1(message):
    chat_id = message.chat.id
    users_data[chat_id]['name'] = message.text
    bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, ask_password_confirmation)
def ask_password_confirmation(message):
    chat_id = message.chat.id
    users_data[chat_id]['password'] = message.text
    bot.send_message(chat_id, "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, check_password_match)
def check_password_match(message):
    chat_id = message.chat.id
    if message.text != users_data[chat_id]['password']:
        bot.send_message(chat_id, "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(message, ask_password_confirmation)
    else:
        bot.send_message(chat_id, "‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\nüì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, register_user)
def register_user(message):
    chat_id = message.chat.id
    users_data[chat_id]['phone'] = message.text
    access_key = generate_access_key()
    conn = sqlite3.connect('employee.sqlite3')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (user_id, name, pass, phone, code_enter, registration) VALUES (?, ?, ?, ?, ?, ?)",
                (chat_id, users_data[chat_id]['name'], users_data[chat_id]['password'], users_data[chat_id]['phone'], access_key, 1))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(chat_id, f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüîë –í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {access_key}", parse_mode="Markdown")
@bot.message_handler(commands=['logout'])
def logout(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(chat_id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞? –î–∞/–ù–µ—Ç", reply_markup=markup)
    bot.register_next_step_handler(message, process_logout)
def process_logout(message):
    chat_id = message.chat.id
    if message.text == "–î–∞":
        conn = sqlite3.connect('employee.sqlite3')
        cur = conn.cursor()
        cur.execute("UPDATE users SET registration = 0 WHERE user_id = ?", (chat_id,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
    else:
        bot.send_message(chat_id, "üëå –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ!")
@bot.message_handler(commands = ['info'])
def info(message):
    conn = sqlite3.connect('employee.sqlite3')  # –ë—ã–ª–æ 'employee.sql'
    cur = conn.cursor()
    cur.execute('SELECT registration FROM users where user_id = ?', (message.from_user.id,))
    register = cur.fetchone()
    cur.close()
    conn.close()
    if register and register[0] == 1:
        conn = sqlite3.connect('employee.sqlite3')
        cur = conn.cursor()
        cur.execute('SELECT name, pass FROM users')
        users = cur.fetchall()
        cur.close()
        conn.close()
        info = ''
        for el in users:
            info += f'–ò–º—è: {el[0]}'
        bot.send_message(message.chat.id, info)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
@bot.message_handler(commands=['delete_account'])
def delete_account(message):
    chat_id = message.chat.id

    conn = sqlite3.connect('employee.sqlite3')
    cur = conn.cursor()
    cur.execute('SELECT registration FROM users WHERE user_id = ?', (chat_id,))
    register = cur.fetchone()
    cur.close()
    conn.close()
    if register and register[0] == 1:
        bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        bot.register_next_step_handler(message, confirm_delete)
    else:
        bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç!")
def confirm_delete(message):
    chat_id = message.chat.id
    entered_password = message.text.strip()
    conn = sqlite3.connect('employee.sqlite3')
    cur = conn.cursor()
    cur.execute('SELECT pass FROM users WHERE user_id = ?', (chat_id,))
    user_data = cur.fetchone()

    if user_data and user_data[0] == entered_password:
        cur.execute('DELETE FROM users WHERE user_id = ?', (chat_id,))
        conn.commit()
        bot.send_message(chat_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    cur.close()
    conn.close()
@bot.message_handler(commands = ['help'])
def help(message):
        bot.send_message(message.chat.id, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –º–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å: \n'
                                          '<em>"/start - –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"\n"/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"\n'
                                          '"/language - —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞"</em>\n<b>'
                                          '–û –±–æ—Ç–µ:</b> –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É'
                                          '–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
                                          '–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Å–ª—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.', parse_mode='html')

@bot.message_handler()
def main(message):
    bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç! üëã –Ø - —á–∞—Ç –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üòÅ\n'
                      '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º, –Ω–∞–ø–∏—à–∏ –º–Ω–µ <b>/help</b> ü§ì\n'
                      '–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫, —Ç–æ –Ω–∞–ø–∏—à–∏ <b>/language</b>', parse_mode='html')

bot.set_my_commands([
    BotCommand("start", "–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    BotCommand("info", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    BotCommand("register", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    BotCommand("language", "–°–º–µ–Ω–∞ —è–∑—ã–∫–∞")

])

bot.polling(none_stop=True)