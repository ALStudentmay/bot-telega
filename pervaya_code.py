import random, re, logging, mysql.connector, qrcode
from io import BytesIO
from telegram import Update
from telegram.ext import ( Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler, CallbackContext)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta

TOKEN = "7764676868:AAHj8c7NCg78j6rRO4GSxb2teSmrjZo-XFI"

db_config = {
    "host": "localhost",
    "user": "root",
    "password": "ibragimkuanbek",
    "database": "water_dispenser"}

FULL_NAME, ADDRESS, PHONE, CODE, ADULTS, CHILDREN, TENANTS = range(7)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_db_connection():
    return mysql.connector.connect(**db_config)

async def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∂–∏–ª—å—Ü–æ–≤ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –∑–∞ –≤–æ–¥—É.\n\n"
        "–í–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!")

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üöÄ /start ‚Äì –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:\n"
        "‚öôÔ∏è /register ‚Äì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∂–∏–ª—å—Ü–∞\n"
        "üîÑüèÉüèÉüèÉ /update_residents ‚Äì –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–ª—å—Ü–∞—Ö\n"
        "üí∞ /check_bonus ‚Äì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤\n"
        "üíß /use_bonus ‚Äì –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –Ω–∞ –≤–æ–¥—É\n"
        "üîé /check_qrcode ‚Äì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ QR-–∫–æ–¥\n"
        "üõ†Ô∏è /support ‚Äì –û–±—Ä–∞—â–µ–Ω–∏–µ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "‚ùì /help ‚Äì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n")


async def register(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    context.user_data["id"] = user_id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (user_id,))
    if cursor.fetchone():
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        cursor.close()
        conn.close()
        return ConversationHandler.END

    cursor.close()
    conn.close()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return FULL_NAME


async def get_full_name(update: Update, context: CallbackContext) -> int:
    context.user_data["full_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    return ADDRESS

async def get_address(update: Update, context: CallbackContext) -> int:
    context.user_data["address"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def get_phone(update: Update, context: CallbackContext) -> int:
    phone = update.message.text.strip()
    if not re.fullmatch(r"\d{11}", phone):
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä! –í–≤–µ–¥–∏—Ç–µ 11-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return PHONE
    context.user_data["phone"] = phone
    context.user_data["code"] = str(random.randint(1000, 9999))
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: {context.user_data['code']})")
    return CODE

async def get_code(update: Update, context: CallbackContext) -> int:
    if update.message.text.strip() != context.user_data["code"]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CODE
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (telegram_id, full_name, address, phone_number) VALUES (%s, %s, %s, %s)",
        (context.user_data["id"], context.user_data["full_name"], context.user_data["address"],
         context.user_data["phone"]))
    conn.commit()
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (context.user_data["id"],))
    user_db_id = cursor.fetchone()[0]
    cursor.execute("INSERT INTO bonuses (user_id, bonus_count) VALUES (%s, 0)", (user_db_id,))
    conn.commit()
    cursor.close()
    conn.close()

    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö.")
    return ADULTS

async def update_residents(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
    result = cursor.fetchone()
    if not result:
        await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register.")
        cursor.close()
        conn.close()
        return ConversationHandler.END
    context.user_data["id"] = user_id
    cursor.close()
    conn.close()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö:")
    return ADULTS

async def get_adults(update: Update, context: CallbackContext) -> int:
    context.user_data["adults"] = int(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:")
    return CHILDREN

async def get_children(update: Update, context: CallbackContext) -> int:
    context.user_data["children"] = int(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:")
    return TENANTS

async def get_tenants(update: Update, context: CallbackContext) -> int:
    context.user_data["tenants"] = int(update.message.text)
    user_id = context.user_data["id"]
    total_residents = context.user_data["adults"] + context.user_data["children"] + context.user_data["tenants"]
    bonus = total_residents * 4
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """UPDATE users SET adults = %s, children = %s, tenants = %s WHERE telegram_id = %s""",
        (context.user_data["adults"], context.user_data["children"], context.user_data["tenants"], user_id))
    cursor.execute("DELETE FROM bonuses WHERE bonus_expiry < NOW() AND user_id = (SELECT id FROM users WHERE telegram_id = %s)", (user_id,))
    expiry_time = datetime.now() + timedelta(days=3)
    cursor.execute(
        "INSERT INTO bonuses (user_id, bonus_count, bonus_expiry) VALUES ((SELECT id FROM users WHERE telegram_id = %s), %s, %s)",
        (user_id, bonus, expiry_time))
    conn.commit()
    cursor.close()
    conn.close()
    await update.message.reply_text(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\nüí∞ –í–∞—à –Ω–æ–≤—ã–π –±–æ–Ω—É—Å: {bonus} –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã (—Å—Ä–æ–∫ 3 –¥–Ω—è).")
    return ConversationHandler.END

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!–ü–û–î –í–û–ü–†–û–°–û–ú!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!–¢–ï–ü–ï–†–¨ –ù–ï–¢)))))))))))))
update_residents_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("update_residents", update_residents)],
    states={
        ADULTS: [MessageHandler(filters.TEXT & filters.Regex("^\\d+$"), get_adults)],
        CHILDREN: [MessageHandler(filters.TEXT & filters.Regex("^\\d+$"), get_children)],
        TENANTS: [MessageHandler(filters.TEXT & filters.Regex("^\\d+$"), get_tenants)],
    },
    fallbacks=[],)

register_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("register", register)],
    states={
        FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
        ADDRESS: [MessageHandler(filters.TEXT, get_address)],
        PHONE: [MessageHandler(filters.TEXT, get_phone)],
        CODE: [MessageHandler(filters.TEXT, get_code)],
        ADULTS: [MessageHandler(filters.TEXT & filters.Regex("^\\d+$"), get_adults)],
        CHILDREN: [MessageHandler(filters.TEXT & filters.Regex("^\\d+$"), get_children)],
        TENANTS: [MessageHandler(filters.TEXT & filters.Regex("^\\d+$"), get_tenants)],
    },
    fallbacks=[],)

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

async def check_qrcode(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register.")
        cursor.close()
        conn.close()
        return

    user_id_db = user[0]

    cursor.execute(
        "SELECT id, expiration_time, status FROM qr_codes WHERE user_id = %s AND status = 'active' ORDER BY expiration_time DESC LIMIT 1",
        (user_id_db,)
    )
    result = cursor.fetchone()

    if not result:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö QR-–∫–æ–¥–æ–≤.")
        cursor.close()
        conn.close()
        return

    qr_id, expiration_time, status = result
    expiration_time = expiration_time.replace(tzinfo=None)
    remaining_time = expiration_time - datetime.now()

    if remaining_time.total_seconds() <= 0:
        cursor.execute("UPDATE qr_codes SET status = 'expired' WHERE id = %s", (qr_id,))
        conn.commit()
        await update.message.reply_text("‚è≥ –í–∞—à QR-–∫–æ–¥ –∏—Å—Ç–µ–∫ –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
    else:
        minutes_left = int(remaining_time.total_seconds() // 60)
        await update.message.reply_text(f"‚è≥ –í–∞—à QR-–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ {minutes_left} –º–∏–Ω—É—Ç.")

    cursor.close()
    conn.close()

async def check_bonus(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register.")
        cursor.close()
        conn.close()
        return

    cursor.execute(
        "DELETE FROM bonuses WHERE bonus_expiry < NOW() AND user_id = %s", (user[0],))
    conn.commit()
    cursor.execute(
        "SELECT COALESCE(SUM(bonus_count), 0) FROM bonuses WHERE user_id = %s", (user[0],))
    bonus_balance = cursor.fetchone()[0]
    cursor.execute(
        "SELECT MIN(bonus_expiry) FROM bonuses WHERE user_id = %s", (user[0],))
    expiry_result = cursor.fetchone()[0]

    cursor.close()
    conn.close()

    if expiry_result:
        remaining_time = expiry_result - datetime.now()
        days_left = remaining_time.days
        hours_left = remaining_time.seconds // 3600
        expiry_text = f"(—Å—Ä–æ–∫ {days_left} –¥–Ω. {hours_left} —á.)"
    else:
        expiry_text = "(–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤)"

    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: {bonus_balance} –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã {expiry_text}.")


async def use_bonus(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, telegram_id FROM users WHERE telegram_id = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register.")
        cursor.close()
        conn.close()
        return ConversationHandler.END

    cursor.execute("DELETE FROM bonuses WHERE bonus_expiry < NOW() AND user_id = %s", (user[0],))
    conn.commit()
    cursor.execute(
        "SELECT status FROM qr_codes WHERE telegram_id = %s AND status = 'active' ORDER BY id DESC LIMIT 1",
        (user[1],)
    )
    result = cursor.fetchone()
    if result:
        await update.message.reply_text("‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.")
        cursor.close()
        conn.close()
        return ConversationHandler.END

    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?")
    return "WAIT_FOR_BOTTLES"

async def wait_for_bottles(update: Update, context: CallbackContext) -> int:
    try:
        bottles = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫.")
        return "WAIT_FOR_BOTTLES"
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, telegram_id FROM users WHERE telegram_id = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register.")
        cursor.close()
        conn.close()
        return ConversationHandler.END

    cursor.execute("SELECT SUM(bonus_count) FROM bonuses WHERE user_id = %s", (user[0],))
    result = cursor.fetchone()
    bonus_count = result[0] if result and result[0] else 0

    if bonus_count < bottles:
        await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {bottles} –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã.")
        cursor.close()
        conn.close()
        return ConversationHandler.END
    cursor.execute(
        "UPDATE bonuses SET bonus_count = bonus_count - %s WHERE user_id = %s AND bonus_count >= %s",
        (bottles, user[0], bottles)
    )
    conn.commit()
    qr_data = f"user_id:{user[0]}, telegram_id:{user[1]}, bottles:{bottles}"
    qr = qrcode.make(qr_data)
    bio = BytesIO()
    qr.save(bio, format="PNG")
    bio.seek(0)
    cursor.execute(
        "INSERT INTO qr_codes (user_id, telegram_id, qr_code, bonus_count, status) VALUES (%s, %s, %s, %s, 'active')",
        (user[0], user[1], qr_data, bottles)
    )
    conn.commit()
    cursor.close()
    conn.close()

    await update.message.reply_photo(photo=bio, caption=f"üö∞ –í–æ—Ç –≤–∞—à QR-–∫–æ–¥ –Ω–∞ {bottles} –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥—ã!")
    return ConversationHandler.END

use_bonus_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("use_bonus", use_bonus)],
    states={
        "WAIT_FOR_BOTTLES": [MessageHandler(filters.TEXT & filters.Regex("^\\d+$"), wait_for_bottles)],
    },
    fallbacks=[],)

async def support(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–æ–Ω—É—Å—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è", callback_data="support_bonus")],
        [InlineKeyboardButton("üì≤ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç QR-–∫–æ–¥", callback_data="support_qr")],
        [InlineKeyboardButton("ü§ñ –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è", callback_data="support_bot")],
        [InlineKeyboardButton("üè¢ –ù–µ –º–æ–≥—É –æ–±–Ω–æ–≤–ª—è—Ç—å –∂–∏–ª—å—Ü–æ–≤", callback_data="support_residents")],
        [InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–µ", callback_data="support_other")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìû –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=reply_markup)

async def handle_support_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    issue_map = {
        "support_bonus": "üí∞ –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤",
        "support_qr": "üì≤ QR-–∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "support_bot": "ü§ñ –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è",
        "support_residents": "üè¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∂–∏–ª—å—Ü–æ–≤",
        "support_other": "‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    }
    issue_text = issue_map.get(query.data, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
    support_email = "n.chernov@aues.kz"
    await query.message.reply_text(f"{issue_text}\nüì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: {support_email}")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(register_conv_handler)
    application.add_handler(update_residents_conv_handler)
    application.add_handler(use_bonus_conv_handler)
    application.add_handler(CommandHandler("support", support))
    application.add_handler(CallbackQueryHandler(handle_support_callback, pattern="^support_"))
    application.add_handler(CommandHandler("update_residents", update_residents))
    application.add_handler(CommandHandler("check_bonus", check_bonus))
    application.add_handler(CommandHandler("use_bonus", use_bonus))
    application.add_handler(CommandHandler("check_qrcode", check_qrcode))
    application.run_polling()

if __name__ == "__main__":
    main()